[
    {
        "question": "Questo codice dovrebbe stampare 'Hello World' ma contiene un errore.",
        "code": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\")\n    }\n}",
        "answers": [
            "Il metodo main dovrebbe essere private invece che public.",
            "Il metodo System.out.println è scritto in modo errato.",
            "Manca il punto e virgola ; alla fine della riga System.out.println(\"Hello World!\")."
        ],
        "correctAnswerIndex": 2,
        "macroexercise": "TrovaErrore",
        "difficulty": "principiante"
    },
    {
        "question": "Questo codice dovrebbe calcolare la somma di due numeri ma contiene un errore.",
        "code": "public int addNumbers(int a, int b) {\n    return a + b\n}",
        "answers": [
            "Manca il punto e virgola ; alla fine della riga return a + b.",
            "Il metodo dovrebbe resituire void invece di int, perché non stampa direttamente il risultato.",
            "La somma è errata, dovrebbe essere return a * b."
        ],
        "correctAnswerIndex": 0,
        "macroexercise": "TrovaErrore",
        "difficulty": "principiante"
    },
    {
        "question": "Questo codice dovrebbe creare un array ma contiene un errore.",
        "code": "public class ArrayTest {\n    public static void main(String[] args) {\n        int arr[5] = {1, 2, 3, 4, 5};\n        System.out.println(arr[0]);\n    }\n}",
        "answers": [
            "Il metodo main è dichiarato in modo errato.",
            "La dichiarazione dell'array è errata, dovrebbe essere: int[] arr = {1, 2, 3, 4, 5}; oppure int arr[] = {1, 2, 3, 4, 5};",
            "System.out.println non può essere usato con gli array."
        ],
        "correctAnswerIndex": 1,
        "macroexercise": "TrovaErrore",
        "difficulty": "intermedio"
    },
    {
        "question": "Questo codice dovrebbe eseguire un ciclo for ma contiene un errore.",
        "code": "public class LoopTest {\n    public static void main(String[] args) {\n        for (int i = 0, i < 10, i++) {\n            System.out.println(i);\n        }\n    }\n}",
        "answers": [
            "Il ciclo for dovrebbe usare punti e virgola come separatori, non virgole: for (int i = 0; i < 10; i++)",
            "Il ciclo for dovrebbe partire da 1, non da 0.",
            "System.out.println dovrebbe essere all'esterno del ciclo."
        ],
        "correctAnswerIndex": 0,
        "macroexercise": "TrovaErrore",
        "difficulty": "intermedio"
    },
    {
        "question": "Questo codice dovrebbe gestire un'eccezione ma contiene un errore.",
        "code": "public class ExceptionTest {\n    public static void main(String[] args) {\n        try {\n            int result = 10 / 0;\n            System.out.println(result);\n        } catch {\n            System.out.println(\"Errore: divisione per zero!\");\n        }\n    }\n}",
        "answers": [
            "Il blocco try non può contenere più di una istruzione.",
            "L'operazione di divisione per zero non genera un'eccezione in Java.",
            "Il blocco catch deve specificare il tipo di eccezione: catch (Exception e) o catch (ArithmeticException e)"
        ],
        "correctAnswerIndex": 2,
        "macroexercise": "TrovaErrore",
        "difficulty": "esperto"
    },
    {
        "question": "Questo codice dovrebbe utilizzare un'interfaccia ma contiene un errore.",
        "code": "interface Animal {\n    void makeSound();\n}\n\npublic class Dog implements Animal {\n    public makeSound() {\n        System.out.println(\"Woof!\");\n    }\n}",
        "answers": [
            "L'interfaccia Animal dovrebbe essere una classe astratta.",
            "Il metodo makeSound() in Dog deve specificare il tipo di ritorno: public void makeSound()",
            "Una classe non può implementare un'interfaccia, dovrebbe usare la parola chiave extends."
        ],
        "correctAnswerIndex": 1,
        "macroexercise": "TrovaErrore",
        "difficulty": "esperto"
    },
    {
        "question": "Completa il seguente codice inserendo la parola mancante per creare una variabile intera chiamata 'somma'.",
        "code": "public class Somma {\n    public static void main(String[] args) {\n        // Inserisci la parola mancante\n        ____ somma = 5 + 3;\n        System.out.println(somma);\n    }\n}",
        "answer": "int",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo il simbolo mancante alla fine dell'istruzione.",
        "code": "public class PuntoVirgola {\n    public static void main(String[] args) {\n        int numero = 42\n        // Inserisci il simbolo mancante nella riga sopra\n        System.out.println(numero);\n    }\n}",
        "answer": ";",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per creare un ciclo che itera 5 volte.",
        "code": "public class Ciclo {\n    public static void main(String[] args) {\n        // Inserisci la keyword mancante\n        ____ (int i = 0; i < 5; i++) {\n            System.out.println(i);\n        }\n    }\n}",
        "answer": "for",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore di confronto per verificare se un numero è pari.",
        "code": "public class PariDispari {\n    public static void main(String[] args) {\n        int numero = 4;\n        // Inserisci l'operatore mancante\n        if (numero % 2 ____ 0) {\n            System.out.println(\"Il numero è pari\");\n        }\n    }\n}",
        "answer": "==",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore mancante per incrementare la variabile contatore.",
        "code": "public class Incremento {\n    public static void main(String[] args) {\n        int contatore = 0;\n        // Inserisci l'operatore mancante\n        contatore____;\n        System.out.println(contatore);\n    }\n}",
        "answer": "++",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore di confronto per verificare se a è maggiore di b.",
        "code": "public class Maggiore {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 5;\n        // Inserisci l'operatore mancante\n        if (a ____ b) {\n            System.out.println(\"a è maggiore di b\");\n        }\n    }\n}",
        "answer": ">",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per gestire le eccezioni.",
        "code": "public class GestioneEccezioni {\n    public static void main(String[] args) {\n        // Inserisci la keyword mancante\n        try {\n            int[] array = new int[5];\n            array[10] = 50;\n        } ____ (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Indice fuori dai limiti!\");\n        }\n    }\n}",
        "answer": "catch",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per dichiarare un metodo che non restituisce valori.",
        "code": "public class Metodo {\n    // Inserisci la keyword mancante\n    public ____ saluta() {\n        System.out.println(\"Ciao mondo!\");\n    }\n    \n    public static void main(String[] args) {\n        Metodo m = new Metodo();\n        m.saluta();\n    }\n}",
        "answer": "void",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore mancante per concatenare due stringhe.",
        "code": "public class Concatenazione {\n    public static void main(String[] args) {\n        String parte1 = \"Hello\";\n        String parte2 = \"World\";\n        // Inserisci l'operatore mancante\n        String risultato = parte1 ____ \" \" ____ parte2;\n        System.out.println(risultato);\n    }\n}",
        "answer": "+",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    }
]