[
    {
        "question": "Questo codice dovrebbe stampare 'Hello World' ma contiene un errore.",
        "code": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\")\n    }\n}",
        "answers": [
            "Il metodo main dovrebbe essere private invece che public.",
            "Il metodo System.out.println è scritto in modo errato.",
            "Manca il punto e virgola ; alla fine della riga System.out.println(\"Hello World!\")."
        ],
        "correctAnswerIndex": 2,
        "macroexercise": "TrovaErrore",
        "difficulty": "principiante"
    },
    {
        "question": "Questo codice dovrebbe calcolare la somma di due numeri ma contiene un errore.",
        "code": "public int addNumbers(int a, int b) {\n    return a + b\n}",
        "answers": [
            "Manca il punto e virgola ; alla fine della riga return a + b.",
            "Il metodo dovrebbe resituire void invece di int, perché non stampa direttamente il risultato.",
            "La somma è errata, dovrebbe essere return a * b."
        ],
        "correctAnswerIndex": 0,
        "macroexercise": "TrovaErrore",
        "difficulty": "principiante"
    },
    {
        "question": "Questo codice dovrebbe stampare i numeri pari da 1 a 10, ma contiene un errore.",
        "code": "public class PrintEvenNumbers {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10; i++) {\n            if (i % 2 == 1) {\n                System.out.println(i);\n            }\n        }\n    }\n}",
        "answers": [
            "Il ciclo for dovrebbe partire da 2 invece che da 1, in modo da stampare direttamente i numeri pari.",
            "La condizione i % 2 == 1 è errata e dovrebbe essere i % 2 == 0, per stampare i numeri pari invece di quelli dispari.",
            "Il problema è che il ciclo for deve terminare a 9 invece che a 10, per evitare di stampare un numero in più."
        ],
        "correctAnswerIndex": 1,
        "macroexercise": "TrovaErrore",
        "difficulty": "principiante"
    },
    {
        "question": "Questo codice dovrebbe verificare se un numero è pari, ma contiene un errore.",
        "code": "public boolean isEven(int number) {\n    if (number % 2 == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "answers": [
            "Il metodo dovrebbe restituire un valore int invece di boolean, perché i numeri pari e dispari sono numeri e non valori booleani.",
            "La condizione number % 2 == 1 è errata e dovrebbe essere number % 2 == 0, poiché attualmente restituisce true per i numeri dispari invece che per i pari.",
            "Il codice non funziona perché manca una chiamata esplicita al metodo Math.abs() per rendere number positivo prima della verifica"
        ],
        "correctAnswerIndex": 1,
        "macroexercise": "TrovaErrore",
        "difficulty": "intermedio"
    },
    {
        "question": "Questo codice dovrebbe calcolare la somma dei numeri da 1 a 'n' ma restituisce un risultato sbagliato.",
        "code": "public int sumNumbers(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum =+ i;\n    }\n    return sum;\n}",
        "answers": [
            "Il ciclo for dovrebbe iniziare da 0 invece che da 1, per includere tutti i numeri fino a n",
            "L'operatore =+ è errato e dovrebbe essere +=, perché attualmente sum =+ i; equivale a sum = +i;, che non accumula il valore correttamente",
            "La variabile sum dovrebbe essere dichiarata come double invece di int, perché potrebbe contenere numeri decimali"
        ],
        "correctAnswerIndex": 1,
        "macroexercise": "TrovaErrore",
        "difficulty": "intermedio"
    },
    {
        "question": "Questo codice dovrebbe trovare il massimo tra tre numeri ma non funziona sempre correttamente, trova l'errore.",
        "code": "public int findMax(int a, int b, int c) {\n    int max = a;\n    if (b > a) max = b;\n    if (c > a) max = c;\n    return max;\n}",
        "answers": [
            "La seconda condizione if (c > a) è errata e dovrebbe essere if (c > max), altrimenti potrebbe non aggiornare max correttamente se c è il numero più grande",
            "Il metodo dovrebbe restituire un double invece di un int, perché potrebbe essere necessario trovare il massimo tra numeri decimali",
            "Il metodo dovrebbe utilizzare l'operatore ternario invece di if, perché Java non supporta più le condizioni if per trovare il massimo"
        ],
        "correctAnswerIndex": 0,
        "macroexercise": "TrovaErrore",
        "difficulty": "intermedio"
    },
    {
        "question": "Questo codice implementa una funzione per invertire una stringa ma restituisce un risultato errato, trova l'errore.",
        "code": "public String reverseString(String str) {\n    String reversed = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        reversed += str.charAt(i);\n    }\n    return reversed;\n}",
        "answers": [
            "Il ciclo for dovrebbe partire da 0 invece che da str.length() - 1, in modo da leggere la stringa nell'ordine corretto",
            "La variabile reversed dovrebbe essere inizializzata con str invece di '', per evitare una stringa vuota come risultato",
            "L'uso di reversed += str.charAt(i); è inefficiente, perché la concatenazione di stringhe in un ciclo crea molteplici oggetti String. Si dovrebbe usare un StringBuilder con .append()"
        ],
        "correctAnswerIndex": 2,
        "macroexercise": "TrovaErrore",
        "difficulty": "esperto"
    },
    {
        "question": "Questo codice dovrebbe calcolare il fattoriale di un numero n ma non funziona correttamente, trova l'errore.",
        "code": "public int factorial(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
        "answers": [
            "result è inizializzato a 0, quindi qualsiasi moltiplicazione con esso darà sempre 0. Dovrebbe essere inizializzato a 1",
            "L'operatore *= è errato, dovrebbe essere += per sommare invece di moltiplicare",
            "Il ciclo for dovrebbe partire da 0 invece che da 1, perché i numeri iniziano da 0"
        ],
        "correctAnswerIndex": 0,
        "macroexercise": "TrovaErrore",
        "difficulty": "esperto"
    },
    {
        "question": "Il seguente codice tenta di trovare il minimo valore in un array ma non restituisce sempre il risultato corretto, trova l'errore.",
        "code": "public int findMin(int[] arr) {\n    int min = 0;\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}",
        "answers": [
            "L'operatore < dovrebbe essere >, perché vogliamo trovare il massimo anziché il minimo",
            "Il ciclo for dovrebbe partire da 0 invece che da 1, in modo da controllare tutti gli elementi",
            "min è inizializzato a 0, il che è sbagliato perché se tutti gli elementi dell'array sono positivi, 0 potrebbe essere erroneamente restituito come minimo. Dovrebbe essere inizializzato con arr[0]"
        ],
        "correctAnswerIndex": 2,
        "macroexercise": "TrovaErrore",
        "difficulty": "esperto"
    },
    




    {
        "question": "Completa il seguente codice inserendo la parola mancante per creare una variabile intera chiamata 'somma'.",
        "code": "public class Somma {\n    public static void main(String[] args) {\n        // Inserisci la parola mancante\n        ____ somma = 5 + 3;\n        System.out.println(somma);\n    }\n}",
        "answer": "int",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo il simbolo mancante alla fine dell'istruzione.",
        "code": "public class PuntoVirgola {\n    public static void main(String[] args) {\n        int numero = 42\n        // Inserisci il simbolo mancante nella riga sopra\n        System.out.println(numero);\n    }\n}",
        "answer": ";",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per creare un ciclo che itera 5 volte.",
        "code": "public class Ciclo {\n    public static void main(String[] args) {\n        // Inserisci la keyword mancante\n        ____ (int i = 0; i < 5; i++) {\n            System.out.println(i);\n        }\n    }\n}",
        "answer": "for",
        "macroexercise": "CompletaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore di confronto per verificare se un numero è pari.",
        "code": "public class PariDispari {\n    public static void main(String[] args) {\n        int numero = 4;\n        // Inserisci l'operatore mancante\n        if (numero % 2 ____ 0) {\n            System.out.println(\"Il numero è pari\");\n        }\n    }\n}",
        "answer": "==",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore mancante per incrementare la variabile contatore.",
        "code": "public class Incremento {\n    public static void main(String[] args) {\n        int contatore = 0;\n        // Inserisci l'operatore mancante\n        contatore____;\n        System.out.println(contatore);\n    }\n}",
        "answer": "++",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore di confronto per verificare se a è maggiore di b.",
        "code": "public class Maggiore {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 5;\n        // Inserisci l'operatore mancante\n        if (a ____ b) {\n            System.out.println(\"a è maggiore di b\");\n        }\n    }\n}",
        "answer": ">",
        "macroexercise": "CompletaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per gestire le eccezioni.",
        "code": "public class GestioneEccezioni {\n    public static void main(String[] args) {\n        // Inserisci la keyword mancante\n        try {\n            int[] array = new int[5];\n            array[10] = 50;\n        } ____ (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Indice fuori dai limiti!\");\n        }\n    }\n}",
        "answer": "catch",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Completa il seguente codice inserendo la keyword mancante per dichiarare un metodo che non restituisce valori.",
        "code": "public class Metodo {\n    // Inserisci la keyword mancante\n    public ____ saluta() {\n        System.out.println(\"Ciao mondo!\");\n    }\n    \n    public static void main(String[] args) {\n        Metodo m = new Metodo();\n        m.saluta();\n    }\n}",
        "answer": "void",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Completa il seguente codice inserendo l'operatore mancante per concatenare due stringhe.",
        "code": "public class Concatenazione {\n    public static void main(String[] args) {\n        String parte1 = \"Hello\";\n        String parte2 = \"World\";\n        // Inserisci l'operatore mancante\n        String risultato = parte1 ____ \" \" ____ parte2;\n        System.out.println(risultato);\n    }\n}",
        "answer": "+",
        "macroexercise": "CompletaCodice",
        "difficulty": "esperto"
    },




    
    {
        "question": "Riordina le istruzioni per creare un programma che stampi 'Hello World'.",
        "code": [
            "public class HelloWorld {",
            "    System.out.println(\"Hello World!\");",
            "    public static void main(String[] args) {",
            "}",
            "}"
        ],
        "correctOrder": [0, 2, 1, 4, 3],
        "macroexercise": "OrdinaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Riordina le istruzioni per creare un ciclo che stampi i numeri da 1 a 5.",
        "code": [
            "public class LoopExample {",
            "    System.out.println(i);",
            "    for (int i = 1; i <= 5; i++) {",
            "    }",
            "    public static void main(String[] args) {",
            "}",
            "}"
        ],
        "correctOrder": [0, 4, 2, 1, 3, 5, 6],
        "macroexercise": "OrdinaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Riordina le istruzioni per creare un metodo che calcoli la somma di due numeri.",
        "code": [
            "public class Calculator {",
            "    return a + b;",
            "    } // fine metodo sum",
            "    public static int sum(int a, int b) {",
            "    public static void main(String[] args) {",
            "        System.out.println(sum(5, 3));",
            "    } // fine metodo main",
            "} // fine classe Calculator"
        ],
        "correctOrder": [0, 3, 1, 2, 4, 5, 6, 7],
        "macroexercise": "OrdinaCodice",
        "difficulty": "principiante"
    },
    {
        "question": "Riordina le istruzioni per creare un programma che calcoli il fattoriale di un numero.",
        "code": [
            "public class Factorial {",
            "    public static void main(String[] args) {",
            "        int result = factorial(5);",
            "        return 1; // caso base",
            "        if (n <= 1) { // verifica caso base",
            "        System.out.println(\"Il fattoriale di 5 è: \" + result);",
            "    } // fine metodo main",
            "    } // fine blocco if-else",
            "    public static int factorial(int n) {",
            "        } else { // caso ricorsivo",
            "            return n * factorial(n - 1); // chiamata ricorsiva",
            "        } // fine else",
            "} // fine classe Factorial"
        ],
        "correctOrder": [0, 1, 2, 5, 6, 8, 4, 3, 9, 10, 11, 12],
        "macroexercise": "OrdinaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Riordina le istruzioni per creare un programma che verifichi se un numero è primo.",
        "code": [
            "public class PrimeCheck {",
            "    public static void main(String[] args) {",
            "        boolean isPrime = true;",
            "        int num = 17;",
            "        if (num <= 1) { // verifica numeri <= 1",
            "        } // fine if num <= 1",
            "        for (int i = 2; i <= Math.sqrt(num); i++) { // verifica divisibilità",
            "            isPrime = false; // imposta a false se divisibile",
            "            if (num % i == 0) { // controlla divisibilità",
            "                break; // esce dal ciclo se divisibile",
            "            } // fine if divisibilità",
            "        } // fine for",
            "            isPrime = false; // imposta a false se <= 1",
            "        System.out.println(num + (isPrime ? \" è primo\" : \" non è primo\"));",
            "    } // fine metodo main",
            "} // fine classe PrimeCheck"
        ],
        "correctOrder": [0, 1, 3, 2, 4, 12, 5, 6, 8, 7, 9, 10, 13, 14, 15],
        "macroexercise": "OrdinaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Riordina le istruzioni per creare un programma che calcoli la media di un array di numeri.",
        "code": [
            "public class Average {",
            "    public static void main(String[] args) {",
            "        for (int num : numbers) { // itera sull'array",
            "        double average = sum / numbers.length; // calcola media",
            "        int[] numbers = {5, 10, 15, 20, 25}; // inizializza array",
            "        } // fine ciclo for",
            "        System.out.println(\"La media è: \" + average);",
            "        double sum = 0; // inizializza somma",
            "            sum += num; // aggiunge ogni numero alla somma",
            "    } // fine metodo main",
            "} // fine classe Average"
        ],
        "correctOrder": [0, 1, 4, 7, 2, 8, 5, 3, 6, 9, 10],
        "macroexercise": "OrdinaCodice",
        "difficulty": "intermedio"
    },
    {
        "question": "Riordina le istruzioni per implementare una classe Student con uno Student Test che utilizza ereditarietà.",
        "code": [
            "public class Person { // classe genitore",
            "    private String name; // attributo nome",
            "    public Person(String name) { // costruttore",
            "        this.name = name; // inizializza nome",
            "    } // fine costruttore Person",
            "    public String getName() { // getter per name",
            "        return name; // restituisce nome",
            "    } // fine metodo getName",
            "} // fine classe Person",
            "",
            "public class Student extends Person { // classe figlia",
            "    private int studentId; // attributo ID studente",
            "    public Student(String name, int studentId) { // costruttore",
            "        super(name); // chiama costruttore genitore",
            "        this.studentId = studentId; // inizializza ID",
            "    } // fine costruttore Student",
            "    public int getStudentId() { // getter per studentId",
            "        return studentId; // restituisce ID",
            "    } // fine metodo getStudentId",
            "} // fine classe Student",
            "",
            "public class StudentTest { // classe di test",
            "    public static void main(String[] args) { // metodo main",
            "        Student student = new Student(\"Alice\", 12345); // crea istanza",
            "        System.out.println(\"Nome: \" + student.getName()); // stampa nome",
            "        System.out.println(\"ID Studente: \" + student.getStudentId()); // stampa ID",
            "    } // fine metodo main",
            "} // fine classe StudentTest"
        ],
        "correctOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],
        "macroexercise": "OrdinaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Riordina le istruzioni per implementare un'interfaccia Shape con le classi Circle e Rectangle che la implementano.",
        "code": [
            "interface Shape { // definizione interfaccia",
            "    double area(); // metodo per calcolare area",
            "} // fine interfaccia Shape",
            "",
            "class Circle implements Shape { // classe cerchio",
            "    private double radius; // raggio del cerchio",
            "    } // fine costruttore Circle",
            "    @Override // sovrascrive metodo dell'interfaccia",
            "    public double area() { // calcolo area cerchio",
            "        this.radius = radius; // inizializza raggio",
            "    public Circle(double radius) { // costruttore",
            "        return Math.PI * radius * radius; // formula area cerchio",
            "} // fine classe Circle",
            "",
            "class Rectangle implements Shape { // classe rettangolo",
            "    private double width; // larghezza rettangolo",
            "    private double height; // altezza rettangolo",
            "    @Override // sovrascrive metodo dell'interfaccia",
            "    public double area() { // calcolo area rettangolo",
            "        return width * height; // formula area rettangolo",
            "    } // fine metodo area",
            "        this.width = width; // inizializza larghezza",
            "        this.height = height; // inizializza altezza",
            "    public Rectangle(double width, double height) { // costruttore",
            "} // fine classe Rectangle",
            "",
            "public class ShapeTest { // classe di test",
            "    public static void main(String[] args) { // metodo main",
            "        Shape circle = new Circle(5); // crea cerchio",
            "        Shape rectangle = new Rectangle(4, 6); // crea rettangolo",
            "        System.out.println(\"Area del cerchio: \" + circle.area()); // stampa area cerchio",
            "        System.out.println(\"Area del rettangolo: \" + rectangle.area()); // stampa area rettangolo",
            "    } // fine metodo main",
            "} // fine classe ShapeTest"
        ],
        "correctOrder": [0, 1, 2, 3, 4, 5, 10, 9, 6, 7, 8, 11, 12, 13, 14, 15, 16, 23, 21, 22, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
        "macroexercise": "OrdinaCodice",
        "difficulty": "esperto"
    },
    {
        "question": "Riordina le istruzioni per implementare una classe generica Pair<K,V> con un esempio di utilizzo.",
        "code": [
            "public class Pair<K, V> { // classe generica con due tipi",
            "    private K key; // chiave di tipo K",
            "    private V value; // valore di tipo V",
            "",
            "    public K getKey() { // getter per key",
            "        return key; // restituisce la chiave",
            "    } // fine metodo getKey",
            "",
            "    public V getValue() { // getter per value",
            "        return value; // restituisce il valore",
            "    } // fine metodo getValue",
            "    } // fine costruttore Pair",
            "    public Pair(K key, V value) { // costruttore",
            "        this.key = key; // inizializza key",
            "        this.value = value; // inizializza value",
            "    } // fine costruttore",
            "",
            "public class PairTest { // classe di test",
            "    public static void main(String[] args) { // metodo main",
            "        Pair<Integer, String> pair1 = new Pair<>(1, \"uno\"); // coppia Integer-String",
            "        Pair<String, Double> pair2 = new Pair<>(\"pi\", 3.14159); // coppia String-Double",
            "",
            "        System.out.println(\"Pair 1 - Chiave: \" + pair1.getKey() + \", Valore: \" + pair1.getValue()); // stampa pair1",
            "        System.out.println(\"Pair 2 - Chiave: \" + pair2.getKey() + \", Valore: \" + pair2.getValue()); // stampa pair2",
            "    } // fine metodo main",
            "} // fine classe PairTest"
        ],
        "correctOrder": [0, 1, 2, 3, 12, 13, 14, 15, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        "macroexercise": "OrdinaCodice",
        "difficulty": "esperto"
    }
]
